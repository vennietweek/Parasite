(function() {
    var J, y, d, C, A, L, e, Y, n, g, R, W, U, I, X, Z, b, N, F, B, Q, h, p, r, O, u, t, S, M, x, m, q, G, a, z, i, s, H, E, w, P, V, T, v, o, l, K, k, c, D = [].slice, aa = {}.hasOwnProperty, f = function(ae, ac) {
        for (var ab in ac) {
            if (aa.call(ac, ab)) {
                ae[ab] = ac[ab];
            }
        }
        function ad() {
            this.constructor = ae;
        }
        ad.prototype = ac.prototype;
        ae.prototype = new ad();
        ae.__super__ = ac.prototype;
        return ae;
    }, j = [].indexOf || function(ad) {
        for (var ac = 0, ab = this.length;
        ac < ab; ac++) {
            if (ac in this && this[ac] === ad) {
                return ac;
            }
        }
        return - 1;
    };
    Q = {
        catchupTime: 100,
        initialRate: 0.03,
        minTime: 250,
        ghostTime: 100,
        maxProgressPerFrame: 20,
        easeFactor: 1.25,
        startOnPageLoad: true,
        restartOnPushState: true,
        restartOnRequestAfter: 500,
        target: "body",
        elements: {
            checkInterval: 100,
            selectors: ["body"]
        },
        eventLag: {
            minSamples: 10,
            sampleCount: 3,
            lagThreshold: 3
        },
        ajax: {
            trackMethods: ["GET"],
            trackWebSockets: true,
            ignoreURLs: []
        }
    };
    M = function() {
        var ab;
        return (ab = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? ab : + (new Date);
    };
    m = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
    B = window.cancelAnimationFrame || window.mozCancelAnimationFrame;
    if (m == null) {
        m = function(ab) {
            return setTimeout(ab, 50);
        };
        B = function(ab) {
            return clearTimeout(ab);
        };
    }
    G = function(ac) {
        var ad, ab;
        ad = M();
        ab = function() {
            var ae;
            ae = M() - ad;
            if (ae >= 33) {
                ad = M();
                return ac(ae, function() {
                    return m(ab);
                });
            } else {
                return setTimeout(ab, 33 - ae);
            }
        };
        return ab();
    };
    q = function() {
        var ab, ac, ad;
        ad = arguments[0], ac = arguments[1], ab = 3 <= arguments.length ? D.call(arguments, 2) : [];
        if (typeof ad[ac] === "function") {
            return ad[ac].apply(ad, ab);
        } else {
            return ad[ac];
        }
    };
    h = function() {
        var ae, ad, ag, ac, ah, af, ab;
        ad = arguments[0], ac = 2 <= arguments.length ? D.call(arguments, 1) : [];
        for (af = 0, ab = ac.length; af < ab; af++) {
            ag = ac[af];
            if (ag) {
                for (ae in ag) {
                    if (!aa.call(ag, ae)) {
                        continue;
                    }
                    ah = ag[ae];
                    if ((ad[ae] != null) && typeof ad[ae] === "object" && (ah != null) && typeof ah === "object") {
                        h(ad[ae], ah);
                    } else {
                        ad[ae] = ah;
                    }
                }
            }
        }
        return ad;
    };
    b = function(ab) {
        var af, ae, ad, ag, ac;
        ae = af = 0;
        for (ag = 0, ac = ab.length; ag < ac; ag++) {
            ad = ab[ag];
            ae += Math.abs(ad);
            af++;
        }
        return ae / af;
    };
    r = function(ac, ab) {
        var ae, af, ad;
        if (ac == null) {
            ac = "options";
        }
        if (ab == null) {
            ab = true;
        }
        ad = document.querySelector("[data-pace-" + ac + "]");
        if (!ad) {
            return;
        }
        ae = ad.getAttribute("data-pace-" + ac);
        if (!ab) {
            return ae;
        }
        try {
            return JSON.parse(ae);
        } catch (ag) {
            af = ag;
            return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", af) : void 0;
        }
    };
    e = (function() {
        function ab() {}
        ab.prototype.on = function(ag, af, ac, ae) {
            var ad;
            if (ae == null) {
                ae = false;
            }
            if (this.bindings == null) {
                this.bindings = {};
            }
            if ((ad = this.bindings)[ag] == null) {
                ad[ag] = [];
            }
            return this.bindings[ag].push({
                handler: af,
                ctx: ac,
                once: ae
            });
        };
        ab.prototype.once = function(ae, ad, ac) {
            return this.on(ae, ad, ac, true);
        };
        ab.prototype.off = function(af, ae) {
            var ad, ag, ac;
            if (((ag = this.bindings) != null ? ag[af] : void 0) == null) {
                return;
            }
            if (ae == null) {
                return delete this.bindings[af];
            } else {
                ad = 0;
                ac = [];
                while (ad < this.bindings[af].length) {
                    if (this.bindings[af][ad].handler === ae) {
                        ac.push(this.bindings[af].splice(ad, 1));
                    } else {
                        ac.push(ad++);
                    }
                }
                return ac;
            }
        };
        ab.prototype.trigger = function() {
            var ai, ak, ac, aj, ah, ad, ag, af, ae;
            ac = arguments[0], ai = 2 <= arguments.length ? D.call(arguments, 1) : [];
            if ((ag = this.bindings) != null ? ag[ac] : void 0) {
                ah = 0;
                ae = [];
                while (ah < this.bindings[ac].length) {
                    af = this.bindings[ac][ah], aj = af.handler, ak = af.ctx, ad = af.once;
                    aj.apply(ak != null ? ak : this, ai);
                    if (ad) {
                        ae.push(this.bindings[ac].splice(ah, 1));
                    } else {
                        ae.push(ah++);
                    }
                }
                return ae;
            }
        };
        return ab;
    })();
    g = window.Pace || {};
    window.Pace = g;
    h(g, e.prototype);
    x = g.options = h({}, Q, window.paceOptions, r());
    K = ["ajax", "document", "eventLag", "elements"];
    for (T = 0, o = K.length; T < o; T++) {
        s = K[T];
        if (x[s] === true) {
            x[s] = Q[s];
        }
    }
    n = (function(ab) {
        f(ac, ab);
        function ac() {
            k = ac.__super__.constructor.apply(this, arguments);
            return k;
        }
        return ac;
    })(Error);
    y = (function() {
        function ab() {
            this.progress = 0;
        }
        ab.prototype.getElement = function() {
            var ad;
            if (this.el == null) {
                ad = document.querySelector(x.target);
                if (!ad) {
                    throw new n;
                }
                this.el = document.createElement("div");
                this.el.className = "pace pace-active";
                document.body.className = document.body.className.replace(/pace-done/g, "");
                document.body.className += " pace-running";
                this.el.innerHTML = '<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
                if (ad.firstChild != null) {
                    ad.insertBefore(this.el, ad.firstChild);
                } else {
                    ad.appendChild(this.el);
                }
            }
            return this.el;
        };
        ab.prototype.finish = function() {
            var ad;
            ad = this.getElement();
            ad.className = ad.className.replace("pace-active", "");
            ad.className += " pace-inactive";
            document.body.className = document.body.className.replace("pace-running", "");
            return document.body.className += " pace-done";
        };
        ab.prototype.update = function(ad) {
            this.progress = ad;
            return this.render();
        };
        ab.prototype.destroy = function() {
            try {
                this.getElement().parentNode.removeChild(this.getElement());
            } catch (ad) {
                n = ad;
            }
            return this.el = void 0;
        };
        var ac = 0;
        ab.prototype.render = function() {
            var ah, ag, ad, af, ai, ae, aj;
            if (document.querySelector(x.target) == null) {
                return false;
            }
            ah = this.getElement();
            af = "translate3d(" + this.progress + "%, 0, 0)";
            aj = ["webkitTransform", "msTransform", "transform"];
            for (ai = 0, ae = aj.length; ai < ae; ai++) {
                ag = aj[ai];
                ah.children[0].style[ag] = af;
            }
            if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
                ah.children[0].setAttribute("data-progress-text", "" + (this.progress * 0.3 | 0) + "");
                if (this.progress >= 100) {
                    ad = "99";
                } else {
                    ad = this.progress < 10 ? "0" : "";
                    ad += this.progress | 0;
                }
                ah.children[0].setAttribute("data-progress", "" + ad);
            }
            return this.lastRenderedProgress = this.progress;
        };
        ab.prototype.done = function() {
            return this.progress >= 100;
        };
        return ab;
    })();
    Y = (function() {
        function ab() {
            this.bindings = {};
        }
        ab.prototype.trigger = function(ae, ah) {
            var ag, af, ad, ai, ac;
            if (this.bindings[ae] != null) {
                ai = this.bindings[ae];
                ac = [];
                for (af = 0, ad = ai.length; af < ad; af++) {
                    ag = ai[af];
                    ac.push(ag.call(this, ah));
                }
                return ac;
            }
        };
        ab.prototype.on = function(ac, ae) {
            var ad;
            if ((ad = this.bindings)[ac] == null) {
                ad[ac] = [];
            }
            return this.bindings[ac].push(ae);
        };
        return ab;
    })();
    V = window.XMLHttpRequest;
    P = window.XDomainRequest;
    w = window.WebSocket;
    p = function(ag, af) {
        var ad, ac, ab;
        ab = [];
        for (ac in af.prototype) {
            try {
                if ((ag[ac] == null) && typeof af[ac] !== "function") {
                    if (typeof Object.defineProperty === "function") {
                        ab.push(Object.defineProperty(ag, ac, {
                            get: function() {
                                return af.prototype[ac];
                            },
                            configurable: true,
                            enumerable: true
                        }));
                    } else {
                        ab.push(ag[ac] = af.prototype[ac]);
                    }
                } else {
                    ab.push(void 0);
                }
            } catch (ae) {
                ad = ae;
            }
        }
        return ab;
    };
    t = [];
    g.ignore = function() {
        var ac, ad, ab;
        ad = arguments[0], ac = 2 <= arguments.length ? D.call(arguments, 1) : [];
        t.unshift("ignore");
        ab = ad.apply(null, ac);
        t.shift();
        return ab;
    };
    g.track = function() {
        var ac, ad, ab;
        ad = arguments[0], ac = 2 <= arguments.length ? D.call(arguments, 1) : [];
        t.unshift("track");
        ab = ad.apply(null, ac);
        t.shift();
        return ab;
    };
    i = function(ac) {
        var ab;
        if (ac == null) {
            ac = "GET";
        }
        if (t[0] === "track") {
            return "force";
        }
        if (!t.length && x.ajax) {
            if (ac === "socket" && x.ajax.trackWebSockets) {
                return true;
            } else {
                if (ab = ac.toUpperCase(), j.call(x.ajax.trackMethods, ab) >= 0) {
                    return true;
                }
            }
        }
        return false;
    };
    R = (function(ab) {
        f(ac, ab);
        function ac() {
            var ad, af = this;
            ac.__super__.constructor.apply(this, arguments);
            ad = function(ah) {
                var ag;
                ag = ah.open;
                return ah.open = function(ak, ai, aj) {
                    if (i(ak)) {
                        af.trigger("request", {
                            type: ak,
                            url: ai,
                            request: ah
                        });
                    }
                    return ag.apply(ah, arguments);
                };
            };
            window.XMLHttpRequest = function(ag) {
                var ah;
                ah = new V(ag);
                ad(ah);
                return ah;
            };
            try {
                p(window.XMLHttpRequest, V);
            } catch (ae) {}
            if (P != null) {
                window.XDomainRequest = function() {
                    var ag;
                    ag = new P;
                    ad(ag);
                    return ag;
                };
                try {
                    p(window.XDomainRequest, P);
                } catch (ae) {}
            }
            if ((w != null) && x.ajax.trackWebSockets) {
                window.WebSocket = function(ag, ai) {
                    var ah;
                    if (ai != null) {
                        ah = new w(ag, ai);
                    } else {
                        ah = new w(ag);
                    }
                    if (i("socket")) {
                        af.trigger("request", {
                            type: "socket",
                            url: ag,
                            protocols: ai,
                            request: ah
                        });
                    }
                    return ah;
                };
                try {
                    p(window.WebSocket, w);
                } catch (ae) {}
            }
        }
        return ac;
    })(Y);
    v = null;
    O = function() {
        if (v == null) {
            v = new R;
        }
        return v;
    };
    z = function(ac) {
        var ae, ad, ab, af;
        af = x.ajax.ignoreURLs;
        for (ad = 0, ab = af.length; ad < ab; ad++) {
            ae = af[ad];
            if (typeof ae === "string") {
                if (ac.indexOf(ae)!==-1) {
                    return true;
                }
            } else {
                if (ae.test(ac)) {
                    return true;
                }
            }
        }
        return false;
    };
    O().on("request", function(ab) {
        var ag, ad, af, ae, ac;
        ae = ab.type, af = ab.request, ac = ab.url;
        if (z(ac)) {
            return;
        }
        if (!g.running && (x.restartOnRequestAfter !== false || i(ae) === "force")) {
            ad = arguments;
            ag = x.restartOnRequestAfter || 0;
            if (typeof ag === "boolean") {
                ag = 0;
            }
            return setTimeout(function() {
                var aj, ak, ai, am, al, ah;
                if (ae === "socket") {
                    aj = af.readyState < 2;
                } else {
                    aj = (0 < (am = af.readyState) && am < 4);
                }
                if (aj) {
                    g.restart();
                    al = g.sources;
                    ah = [];
                    for (ak = 0, ai = al.length; ak < ai; ak++) {
                        s = al[ak];
                        if (s instanceof J) {
                            s.watch.apply(s, ad);
                            break;
                        } else {
                            ah.push(void 0);
                        }
                    }
                    return ah;
                }
            }, ag);
        }
    });
    J = (function() {
        function ab() {
            var ac = this;
            this.elements = [];
            O().on("request", function() {
                return ac.watch.apply(ac, arguments);
            });
        }
        ab.prototype.watch = function(ac) {
            var ag, af, ae, ad;
            ae = ac.type, ag = ac.request, ad = ac.url;
            if (z(ad)) {
                return;
            }
            if (ae === "socket") {
                af = new I(ag);
            } else {
                af = new X(ag);
            }
            return this.elements.push(af);
        };
        return ab;
    })();
    X = (function() {
        function ab(ah) {
            var ag, ad, af, ac, ae, aj, ai = this;
            this.progress = 0;
            if (window.ProgressEvent != null) {
                ad = null;
                ah.addEventListener("progress", function(ak) {
                    if (ak.lengthComputable) {
                        return ai.progress = 100 * ak.loaded / ak.total;
                    } else {
                        return ai.progress = ai.progress + (100 - ai.progress) / 2;
                    }
                }, false);
                aj = ["load", "abort", "timeout", "error"];
                for (af = 0, ac = aj.length; af < ac; af++) {
                    ag = aj[af];
                    ah.addEventListener(ag, function() {
                        return ai.progress = 100;
                    }, false);
                }
            } else {
                ae = ah.onreadystatechange;
                ah.onreadystatechange = function() {
                    var ak;
                    if ((ak = ah.readyState) === 0 || ak === 4) {
                        ai.progress = 100;
                    } else {
                        if (ah.readyState === 3) {
                            ai.progress = 50;
                        }
                    }
                    return typeof ae === "function" ? ae.apply(null, arguments) : void 0;
                };
            }
        }
        return ab;
    })();
    I = (function() {
        function ab(af) {
            var ae, ad, ac, ah, ag = this;
            this.progress = 0;
            ah = ["error", "open"];
            for (ad = 0, ac = ah.length; ad < ac; ad++) {
                ae = ah[ad];
                af.addEventListener(ae, function() {
                    return ag.progress = 100;
                }, false);
            }
        }
        return ab;
    })();
    C = (function() {
        function ab(ae) {
            var ac, af, ad, ag;
            if (ae == null) {
                ae = {};
            }
            this.elements = [];
            if (ae.selectors == null) {
                ae.selectors = [];
            }
            ag = ae.selectors;
            for (af = 0, ad = ag.length; af < ad; af++) {
                ac = ag[af];
                this.elements.push(new A(ac));
            }
        }
        return ab;
    })();
    A = (function() {
        function ab(ac) {
            this.selector = ac;
            this.progress = 0;
            this.check();
        }
        ab.prototype.check = function() {
            var ac = this;
            if (document.querySelector(this.selector)) {
                return this.done();
            } else {
                return setTimeout((function() {
                    return ac.check();
                }), x.elements.checkInterval);
            }
        };
        ab.prototype.done = function() {
            return this.progress = 100;
        };
        return ab;
    })();
    d = (function() {
        ab.prototype.states = {
            loading: 0,
            interactive: 50,
            complete: 100
        };
        function ab() {
            var ac, ae, ad = this;
            this.progress = (ae = this.states[document.readyState]) != null ? ae : 100;
            ac = document.onreadystatechange;
            document.onreadystatechange = function() {
                if (ad.states[document.readyState] != null) {
                    ad.progress = ad.states[document.readyState];
                }
                return typeof ac === "function" ? ac.apply(null, arguments) : void 0;
            };
        }
        return ab;
    })();
    L = (function() {
        function ab() {
            var ag, ac, af, ae, ad, ah = this;
            this.progress = 0;
            ag = 0;
            ad = [];
            ae = 0;
            af = M();
            ac = setInterval(function() {
                var ai;
                ai = M() - af - 50;
                af = M();
                ad.push(ai);
                if (ad.length > x.eventLag.sampleCount) {
                    ad.shift();
                }
                ag = b(ad);
                if (++ae >= x.eventLag.minSamples && ag < x.eventLag.lagThreshold) {
                    ah.progress = 100;
                    return clearInterval(ac);
                } else {
                    return ah.progress = 100 * (3 / (ag + 3));
                }
            }, 50);
        }
        return ab;
    })();
    U = (function() {
        function ab(ac) {
            this.source = ac;
            this.last = this.sinceLastUpdate = 0;
            this.rate = x.initialRate;
            this.catchup = 0;
            this.progress = this.lastProgress = 0;
            if (this.source != null) {
                this.progress = q(this.source, "progress");
            }
        }
        ab.prototype.tick = function(ad, ae) {
            var ac;
            if (ae == null) {
                ae = q(this.source, "progress");
            }
            if (ae >= 100) {
                this.done = true;
            }
            if (ae === this.last) {
                this.sinceLastUpdate += ad;
            } else {
                if (this.sinceLastUpdate) {
                    this.rate = (ae - this.last) / this.sinceLastUpdate;
                }
                this.catchup = (ae - this.progress) / x.catchupTime;
                this.sinceLastUpdate = 0;
                this.last = ae;
            }
            if (ae > this.progress) {
                this.progress += this.catchup * ad;
            }
            ac = 1 - Math.pow(this.progress / 100, x.easeFactor);
            this.progress += ac * this.rate * ad;
            this.progress = Math.min(this.lastProgress + x.maxProgressPerFrame, this.progress);
            this.progress = Math.max(0, this.progress);
            this.progress = Math.min(100, this.progress);
            this.lastProgress = this.progress;
            return this.progress;
        };
        return ab;
    })();
    H = null;
    a = null;
    N = null;
    E = null;
    Z = null;
    F = null;
    g.running = false;
    u = function() {
        if (x.restartOnPushState) {
            return g.restart();
        }
    };
    if (window.history.pushState != null) {
        l = window.history.pushState;
        window.history.pushState = function() {
            u();
            return l.apply(window.history, arguments);
        };
    }
    if (window.history.replaceState != null) {
        c = window.history.replaceState;
        window.history.replaceState = function() {
            u();
            return c.apply(window.history, arguments);
        };
    }
    W = {
        ajax: J,
        elements: C,
        document: d,
        eventLag: L
    };
    (S = function() {
        var ae, af, ad, ac, ab, ai, ah, ag;
        g.sources = H = [];
        ai = ["ajax", "elements", "document", "eventLag"];
        for (af = 0, ac = ai.length; af < ac; af++) {
            ae = ai[af];
            if (x[ae] !== false) {
                H.push(new W[ae](x[ae]));
            }
        }
        ag = (ah = x.extraSources) != null ? ah : [];
        for (ad = 0, ab = ag.length; ad < ab; ad++) {
            s = ag[ad];
            H.push(new s(x));
        }
        g.bar = N = new y;
        a = [];
        return E = new U;
    })();
    g.stop = function() {
        g.trigger("stop");
        g.running = false;
        N.destroy();
        F = true;
        if (Z != null) {
            if (typeof B === "function") {
                B(Z);
            }
            Z = null;
        }
        return S();
    };
    g.restart = function() {
        g.trigger("restart");
        g.stop();
        return g.start();
    };
    g.go = function() {
        var ab;
        g.running = true;
        N.render();
        ab = M();
        F = false;
        return Z = G(function(al, ad) {
            var ap, ai, ao, af, am, ar, aq, an, aj, ak, ah, ae, ac, au, at, ag;
            an = 100 - N.progress;
            ai = ah = 0;
            ao = true;
            for (ar = ae = 0, au = H.length; ae < au; ar=++ae) {
                s = H[ar];
                ak = a[ar] != null ? a[ar] : a[ar] = [];
                am = (ag = s.elements) != null ? ag : [s];
                for (aq = ac = 0, at = am.length; ac < at;
                aq=++ac) {
                    af = am[aq];
                    aj = ak[aq] != null ? ak[aq] : ak[aq] = new U(af);
                    ao&=aj.done;
                    if (aj.done) {
                        continue;
                    }
                    ai++;
                    ah += aj.tick(al);
                }
            }
            ap = ah / ai;
            N.update(E.tick(al, ap));
            if (N.done() || ao || F) {
                N.update(100);
                g.trigger("done");
                return setTimeout(function() {
                    N.finish();
                    g.running = false;
                    return g.trigger("hide");
                }, Math.max(x.ghostTime, Math.max(x.minTime - (M() - ab), 0)));
            } else {
                return ad();
            }
        });
    };
    g.start = function(ab) {
        h(x, ab);
        g.running = true;
        try {
            N.render();
        } catch (ac) {
            n = ac;
        }
        if (!document.querySelector(".pace")) {
            return setTimeout(g.start, 50);
        } else {
            g.trigger("start");
            return g.go();
        }
    };
    if (typeof define === "function" && define.amd) {
        define(["pace"], function() {
            return g;
        });
    } else {
        if (typeof exports === "object") {
            module.exports = g;
        } else {
            if (x.startOnPageLoad) {
                g.start();
            }
        }
    }
}).call(this);

